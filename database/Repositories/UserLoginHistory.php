<?php

namespace Repositories;

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

use Doctrine\ORM\EntityRepository;

/**
 * UserLoginHistory
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserLoginHistory extends EntityRepository
{
    /**
     * Get all login history (or a for a particular user) for listing on the frontend CRUD
     *
     * @see \IXP\Http\Controllers\Doctrine2Frontend
     *
     * @param int|null $userid
     * @param int $limit
     * @return array Array of login history (as associated arrays) (or for a single user if `$id` passed)
     */
    public function getAllForFeList( int $userid = null , int $limit = 0 )
    {
        $dql = "SELECT  lh.id  AS id, 
                        lh.at  AS at, 
                        lh.ip  AS ip, 
                        u.id   AS user_id,
                        c.name AS cust_name
                FROM Entities\\UserLoginHistory lh
                LEFT JOIN lh.customerToUser c2u
                LEFT JOIN c2u.customer AS c
                LEFT JOIN c2u.user u
                WHERE 1 = 1";

        if( $userid ) {
            $dql .= " AND u.id = " . (int)$userid;
        }

        $dql .= "ORDER BY at DESC";

        $query = $this->getEntityManager()->createQuery( $dql );

        if( $limit > 0 ){
            $query->setMaxResults( $limit );
        }

        return $query->getArrayResult();
    }

    /**
     * Delete all the User login history for a customer to user
     *
     * @param int $id
     *
     * @return void
     */
    public function deleteUserLoginHistory( int $id )
    {
        return $this->getEntityManager()->createQuery( "DELETE FROM Entities\\UserLoginHistory lh WHERE lh.customerToUser = ?1" )->setParameter(1, $id )->execute();
    }
}
