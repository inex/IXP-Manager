<?php

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

use Doctrine\ORM\EntityRepository;

use IPTools\Network as IPToolsNetwork;

use Repositories\Traits\IPAddress as IPAddressTrait;


/**
 * IPv4Address
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IPv4Address extends EntityRepository
{
    use IPAddressTrait;

    /** 
     * Find VLAN interfaces by (partial) IP address
     * 
     * @param  string $ip The IP address to search for
     * @return \Entities\VlanInterface[] Matching interfaces
     */
    public function findVlanInterfaces( $ip )
    {
        return $this->getEntityManager()->createQuery(
                "SELECT vli
        
                 FROM \\Entities\\VlanInterface vli
                 LEFT JOIN vli.IPv4Address ip

                 WHERE ip.address LIKE :ip"
            )
            ->setParameter( 'ip', strtolower( "%{$ip}" ) )
            ->getResult();
    }

    /**
     * Get all IPv4 address for listing on the frontend
     *
     * @param int $vlanid Get all IP for a vlan ?
     *
     * @return array All Ip address
     */
    public function getAllForList( int $vlanid = null )
    {

        $dql = "SELECT  ip.id as id, 
                        ip.address as address,
                        v.name AS vlan, 
                        v.id as vlanid,
                        vli.id AS vliid,
                        vli.ipv4hostname AS hostname,
                        c.name AS customer, 
                        c.id AS customerid,
                        vi.id AS viid
                        
                FROM Entities\\IPv4Address ip
                LEFT JOIN ip.Vlan as v
                LEFT JOIN ip.VlanInterface as vli
                LEFT JOIN vli.VirtualInterface as vi
                LEFT JOIN vi.Customer as c ";



        if( $vlanid ) {
            $dql .= " WHERE v.id = " . (int)$vlanid;
        }

        $dql .= " ORDER BY address ASC" ;


        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getArrayResult();
    }


    /**
     * For a given IPTools library network object, generate sequential IPv4 addresses.
     *
     * @param IPToolsNetwork $network
     * @return array Generated addresses (string[])
     */
    public static function generateSequentialAddresses( IPToolsNetwork $network ): array
    {
        assert( $network->getFirstIP()->getVersion() == 'IPv4' );

        $addresses = [];

        foreach( $network as $ip ) {
            $addresses[] = (string)$ip;
        }

        return $addresses;
    }
}
