<?php

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

use Doctrine\ORM\EntityRepository;


/**
 * PhysicalInterface
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class PhysicalInterface extends EntityRepository
{

    /**
     * Provide array of physical interfaces for the list Action
     *
     * @return array An array of physical interfaces
     */
    public function getForList(): array
    {
        return $this->getEntityManager()->createQuery(
            "SELECT pi.id AS id, pi.speed AS speed, pi.duplex AS duplex, pi.status AS status,
                    pi.notes AS notes, pi.autoneg AS autoneg,
                    c.name AS customer, c.id AS custid,
                    s.name AS switch, s.id AS switchid,
                    vi.id AS vintid,
                    sp.type as type, ppi.id as ppid, fpi.id as fpid,
                    sp.name AS port, l.id AS locid, l.name AS location
                    FROM \\Entities\\PhysicalInterface pi
                        LEFT JOIN pi.PeeringPhysicalInterface ppi
                        LEFT JOIN pi.FanoutPhysicalInterface fpi
                        LEFT JOIN pi.VirtualInterface vi
                        LEFT JOIN vi.Customer c
                        LEFT JOIN pi.SwitchPort sp
                        LEFT JOIN sp.Switcher s
                        LEFT JOIN s.Cabinet cab
                        LEFT JOIN cab.Location l"
            )->getArrayResult();
    }

    /**
     * Provide array of all the speeds
     *
     * @return array
     */
    public function getAllSpeed(): array
    {
         $arraySpeeds = $this->getEntityManager()->createQuery(
            "SELECT DISTINCT pi.speed as speed
                    FROM \\Entities\\PhysicalInterface pi"
        )->getScalarResult();

         $speeds = [];

         foreach ( $arraySpeeds as $s ){

             $speeds[] = $s[ 'speed' ];
         }

        sort($speeds );
        return $speeds;
    }

}
