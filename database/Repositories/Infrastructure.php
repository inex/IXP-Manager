<?php

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * Infrastructure
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Infrastructure extends EntityRepository
{
    /**
     * The cache key for the primary infrastructure
     * @var string The cache key for the primary infrastructure
     */
    const CACHE_KEY_PRIMARY = 'infrastructure_primary';
    
    /**
     * The cache key for the all infrastructures
     * @var string The cache key for all infrastructures
     */
    const CACHE_KEY_ALL = 'infrastructure_all';
    
    /**
     * Return an array of infrastructure names where the array key is the infrastructure id.
     *
     * @param \Entities\IXP $ixp IXP to filter infrastructure names.
     * @return array An array of infrastructure names with the infrastructure id as the key.
     */
    public function getNames( $ixp = false )
    {
        $dql = "SELECT i.id AS id, i.name AS name FROM Entities\\Infrastructure i";

        if( $ixp )
            $dql .= " WHERE i.IXP = ?1";

        $dql .= " ORDER BY name ASC";
        
        $query = $this->getEntityManager()->createQuery( $dql );

        if( $ixp )
            $query->setParameter( 1, $ixp );

        $ainfras = $query->getResult();
        
        $infras = [];
        foreach( $ainfras as $a )
            $infras[ $a['id'] ] = $a['name'];
        
        return $infras;
    }
    
    /**
     * Return the primary infrastructure (for a given IXP, or the default IXP)
     *
     * @throws \IXP_Exception
     * @param \Entities\IXP $ixp The IXP to find the primary infrastucture for. If null, uses the default IXP with ID 1.
     * @param bool $throw If true (default) throw an excpetion on database inconsistency (no primary, more that one priamry)
     * @return \Entities\Infrastructure The primary infrastructure for a given IXP. Or, if `$throw` is false, return false if no primary.
     */
    public function getPrimary( $ixp = null, $throw = true )
    {
        if( $ixp == null )
            $ixp = $this->getEntityManager()->getRepository( '\\Entities\\IXP' )->getDefault();
        
        $infra = $this->getEntityManager()->createQuery(
                "SELECT i
                    FROM Entities\\Infrastructure i
                    JOIN i.IXP ixp
                    WHERE i.isPrimary = 1
                        AND ixp = :ixp"
            )
            ->setParameter( 'ixp', $ixp )
            ->useResultCache( true, 7200, self::CACHE_KEY_PRIMARY )
            ->getResult();
        
        if( !$infra || count( $infra ) > 1 )
        {
            // uh oh, inconsistency
            if( !$throw )
                return false;
            
            throw new \IXP_Exception(
                'When seeking the primary infrastructure of IXP ID #' . $ixp->getId() . ' we found none or more than one.'
                    . ' There must be one (and only one) infrastructure marked as private per IXP'
            );
        }
        
        return $infra[0];
    }
    
    /**
     * Get all infrastructures for an IXP
     *
     * @param \Entities\IXP $ixp The IXP to find the infrastuctures for
     * @return \Entities\Infrastructure[] The infrastructures for a given IXP
     */
    public function getAll( $ixp = null )
    {
        if( $ixp == null )
            $ixp = $this->getEntityManager()->getRepository( '\\Entities\\IXP' )->getDefault();

        $infras = $this->getEntityManager()->createQuery(
                "SELECT i
                    FROM Entities\\Infrastructure i
                    JOIN i.IXP ixp
                    WHERE ixp = :ixp
                    ORDER BY i.name ASC"
            )
            ->setParameter( 'ixp', $ixp )
            ->useResultCache( true, 7200, self::CACHE_KEY_ALL )
            ->getResult();

        return $infras;
    }

    /**
     * Get all infrastructures (or a particular one) for listing on the frontend CRUD
     *
     * @see \IXP\Http\Controller\Doctrine2Frontend
     *
     *
     * @param \stdClass $feParams
     * @param int|null $id
     * @return array Array of infrastructures (as associated arrays) (or single element if `$id` passed)
     */
    public function getAllForFeList( \stdClass $feParams, int $id = null )
    {
        $dql = "SELECT i.id AS id, 
                  i.name AS name, 
                  i.isPrimary AS isPrimary,
                  i.shortname AS shortname,
                  i.ixf_ix_id AS ixf_ix_id, 
                  i.peeringdb_ix_id AS peeringdb_ix_id
                FROM Entities\\Infrastructure i
                WHERE 1 = 1";

        if( $id ) {
            $dql .= " AND i.id = " . (int)$id;
        }

        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getArrayResult();
    }
    
    
    /**
     * Get all infrastructures for an IXP as an array indexed by their ids
     *
     * @param string $key The property of the infrastructure to place in the array (e.g. `Name`, `Shortname`)
     * @param \Entities\IXP $ixp The IXP to find the infrastuctures for
     * @return array The infrastructures for a given IXP
     */
    public function getAllAsArray( $key = 'Name', $ixp = null )
    {
        $infras = [];
        $fn = "get{$key}";
        
        $oInfras = $this->getAll( $ixp );

        foreach( $oInfras as $i )
            $infras[ $i->getId() ] = $i->$fn();

        return $infras;
    }

}
