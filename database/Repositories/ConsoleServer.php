<?php

namespace Repositories;

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

use Doctrine\ORM\EntityRepository;

/**
 * ConsoleServer
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsoleServer extends EntityRepository
{
    /**
     * Return an array of all console servers names where the array key is the console server id.
     * @return array An array of all console servers names with the console server id as the key.
     */
    public function getAsArray(): array {
        $csc = [];
        foreach( self::findAll() as $cs ) {
            $csc[ $cs->getId() ] = $cs->getName();
        }

        asort( $csc);

        return $csc;
    }

    /**
     * Get all console server (or a particular one) for listing on the frontend CRUD
     *
     * @see \IXP\Http\Controllers\Doctrine2Frontend
     *
     *
     * @param \stdClass $feParams
     * @param int|null $id
     * @return array Array of console server (as associated arrays) (or single element if `$id` passed)
     */
    public function getAllForFeList( \stdClass $feParams, int $id = null )
    {
        $dql = /** @lang text */
            "SELECT cs.id AS id,
                    cs.name AS name,
                    cs.model AS model,
                    cs.active AS active, 
                    cs.notes AS notes,
                    cs.hostname AS hostname,
                    cs.serial_number AS serialNumber,
                    v.id AS vendorid, 
                    v.name AS vendor, 
                    c.id AS cabinetid, 
                    c.name AS cabinet,
                    l.id AS locationid,
                    l.shortname AS facility,
                    COUNT( DISTINCT csc.id ) AS num_connections 
                FROM Entities\\ConsoleServer cs
                    LEFT JOIN cs.consoleServerConnections csc
                    LEFT JOIN cs.cabinet c
                    LEFT JOIN c.Location l
                    LEFT JOIN cs.vendor v
                
                WHERE 1 = 1";

        if( $id ) {
            $dql .= " AND cs.id = " . $id;
        }

        $dql .= " GROUP BY cs.id ";

        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        return $this->getEntityManager()->createQuery( $dql )->getArrayResult();
    }
}
