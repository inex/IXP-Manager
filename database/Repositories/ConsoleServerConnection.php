<?php

namespace Repositories;

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */


use Doctrine\ORM\EntityRepository;

use Entities\ConsoleServerConnection as ConsoleServerConnectionEntity;

/**
 * ConsoleServerConnection
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class ConsoleServerConnection extends EntityRepository
{
    /**
     * Get all console server connections (or a particular one) for listing on the frontend CRUD
     *
     * @see \IXP\Http\Controllers\Doctrine2Frontend
     *
     *
     * @param \stdClass $feParams
     * @param int|null $id
     * @return array Array of console server connections (as associated arrays) (or single element if `$id` passed)
     */
    public function getAllForFeList( \stdClass $feParams, int $id = null, int $port = null )
    {
        $dql = /** @lang text */
            "SELECT  csc.id AS id,
                        csc.port AS port, 
                        csc.speed AS speed,
                        csc.notes AS notes, 
                        c.name AS customer, 
                        c.id AS customerid,
                        csc.parity AS parity, 
                        csc.stopbits AS stopbits,
                        csc.autobaud AS autobaud,
                        csc.flowcontrol AS flowcontrol,
                        csc.description AS description,
                        cs.id   AS consoleserver_id,
                        cs.name AS consoleserver_name
                FROM Entities\\ConsoleServerConnection csc
                LEFT JOIN csc.consoleServer cs
                LEFT JOIN csc.Customer c
                
                WHERE 1 = 1";

        if( $id ) {
            $dql .= " AND csc.id = " . (int)$id;
        }

        if( $port ) {
            $dql .= " AND csc.consoleServer = " . (int)$port;
        }

        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getArrayResult();
    }


    /**
     * Get a console server connection for a given consoleserverid and port
     *
     * @param int $csid     Consoler server ID
     * @param string $port  Port
     *
     * @return ConsoleServerConnectionEntity[]
     *
     * @throws
     */
    public function getByServerAndPort( int $csid, string $port ): array {
        $dql = "SELECT  csc
                FROM Entities\\ConsoleServerConnection csc
                WHERE csc.consoleServer = :csid
                AND csc.port = :port";


        return $this->getEntityManager()->createQuery( $dql )
                ->setParameter( 'csid', $csid )
                ->setParameter( 'port', $port )
                ->getResult();
    }
}
