<?php

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

use Cache;
use Doctrine\ORM\EntityRepository;
use Entities\{
    Customer as CustomerEntity,
    Router as RouterEntity,
    User as UserEntity
};

/**
 * PhysicalInterface
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Router extends EntityRepository
{

    /**
     * Find all routers indexed by handle
     *
     * @return array
     */
    public function findAllByHandle() {
        $routers = [];
        foreach( $this->findAll() as $r ) {
            $routers[ $r->getHandle() ] = $r;
        }

        return $routers;
    }

    /**
     * Find all peering IPs for a given router type
     *
     * @return array
     */
    public function getAllPeeringIPs( int $type ) {
        $ips = [];
        foreach( $this->filterCollectionOnType( $this->findAll(), $type ) as $r ) {
            $ips[$r->getVlan()->getId()][] = $r->getPeeringIp();
        }

        return $ips;
    }

    /**
     * Find all routers indexed by peering IPs for a given router type
     *
     * @return array
     */
    public function indexAllByPeeringIPs( int $type ) {
        $ips = [];
        foreach( $this->filterCollectionOnType( $this->findAll(), $type ) as $r ) {
            $ips[ $r->getVlan()->getId() ][ $r->getPeeringIp() ] = $r;
        }

        return $ips;
    }

    /**
     * Find all peering ASNs for a given router type
     *
     * @param int $type
     * @return array
     */
    public function getAllPeeringASNs( int $type ): array {
        $asns = [];

        /** @var RouterEntity $r */
        foreach( $this->filterCollectionOnType( $this->findAll(), $type ) as $r ) {
            if( !in_array( $r->getAsn(), $asns ) ) {
                $asns[] = $r->getAsn();
            }
        }

        return $asns;
    }



    /**
     * Get all routers by type
     *
     * @param int  $type See Entities\Router::$TYPES
     * @param bool $asArray Return the result as an array or a Doctrine collection of objects
     * @return array
     */
    public function filterForApiType( int $type, bool $asArray = false ) {
        $dql = "SELECT r FROM Entities\Router r WHERE r.api_type = ?1 ORDER BY r.handle ASC";
        $qry = $this->getEntityManager()->createQuery( $dql );
        $qry->setParameter( 1, $type );

        return $asArray ? $qry->getArrayResult() : $qry->getResult();
    }



    /**
     * Filter a collection of routers by VLAN id
     *
     * @param array $routers
     * @param int   $vlanId VLAN ID to filter on
     * @return array
     */
    public function filterCollectionOnVlanId( $collection, $vlanId ) {
        foreach( $collection as $i => $r ) {
            if( $r->getVlan()->getId() != $vlanId ) {
                unset( $collection[$i] );
            }
        }

        return $collection;
    }

    /**
     * Filter a collection of routers by type
     *
     * @param array $routers
     * @param int   $type Type to filter on
     * @return array
     */
    public function filterCollectionOnType( $collection, $type ) {
        foreach( $collection as $i => $r ) {
            if( $r->getType() != $type ) {
                unset( $collection[$i] );
            }
        }

        return $collection;
    }

    /**
     * Filter a collection of routers by protocol
     *
     * @param array $routers
     * @param int   $protocol Protocol to filter on
     * @return array
     */
    public function filterCollectionOnProtocol( $collection, $protocol ) {
        foreach( $collection as $i => $r ) {
            if( $r->getProtocol() != $protocol ) {
                unset( $collection[$i] );
            }
        }

        return $collection;
    }



    /**
     * Gather the data for looking glass dropdowns
     *
     * This is the dropdown on the top right of the IXP Manager looking glass interface.
     *
     * @param CustomerEntity $customer
     * @param UserEntity $user
     * @return array
     */
    public function makeRouterDropdown( $customer = null, $user = null ): array {
        $cacheKey = 'lg_dd_' . ( $customer ? $customer->getId() : 'public' );
        if( Cache::has( $cacheKey ) ) {
            return Cache::get($cacheKey);
        }

        $dd = [];
        $routers = $this->findAllByHandle();
        ksort( $routers );

        /** @var RouterEntity $r */
        foreach( $routers as $key => $r ) {
            if( !$r->hasApi() ) {
                continue;
            }

            if( !$r->authorise( $user ? $user->getPrivs() : UserEntity::AUTH_PUBLIC )  ) {
                continue;
            }

            if( $r->quarantine() ) {
                if( !$user ) {
                    continue;
                }

                if( !$user->isSuperUser() && !$customer->hasInterfacesInQuarantine() ) {
                    continue;
                }
            }

            $dd[$r->resolveType()][$key] = $r->getName();
        }

        Cache::put( $cacheKey, $dd, 900 );
        return $dd;
    }

}