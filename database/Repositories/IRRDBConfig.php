<?php

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

use Entities\IRRDBConfig as IRRDBConfigEntity;

use Doctrine\ORM\EntityRepository;

/**
 * IRRDBConfig
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class IRRDBConfig extends EntityRepository
{
    /**
     * Get all infrastructures (or a particular one) for listing on the frontend CRUD
     *
     * @see \IXP\Http\Controller\Doctrine2Frontend
     *
     *
     * @param \stdClass $feParams
     * @param int|null $id
     * @return array Array of infrastructures (as associated arrays) (or single element if `$id` passed)
     */
    public function getAllForFeList( \stdClass $feParams, int $id = null )
    {
        $dql = "SELECT  o.id AS id,
                        o.host AS host,
                        o.protocol AS protocol,
                        o.source AS source, 
                        o.notes AS notes
                FROM Entities\\IRRDBConfig o
                WHERE 1 = 1";

        if( $id ) {
            $dql .= " AND o.id = " . (int)$id;
        }

        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getArrayResult();
    }

    /**
     * Return an array of all IRRDB Config
     * @return array An array of IRRDB Config
     */
    public function getAsArray(): array {
        $irrdb = [];

        foreach( $this->findBy( [], [ 'source' => 'ASC' ] ) as $i ) {
            /** @var IRRDBConfigEntity $i */
            $irrdb[ $i->getId()] = [
                'id'        => $i->getId(),
                'protocol'  => $i->getProtocol(),
                'source'    => $i->getSource(),
                'host'      => $i->getHost(),
                'notes'     => $i->getNotes(),
            ];
        }

        return $irrdb;
    }
}
