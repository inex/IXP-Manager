<?php

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * Cabinet
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CustomerTag extends EntityRepository
{

    /**
     * Get all customer tag (or a particular one) for listing on the frontend CRUD
     *
     * @see \IXP\Http\Controllers\Doctrine2Frontend
     *
     *
     * @param \stdClass $feParams
     * @param int|null $id
     * @return array Array of cabinets (as associated arrays) (or single element if `$id` passed)
     */
    public function getAllForFeList( \stdClass $feParams, int $id = null )
    {
        $dql = "SELECT  ct.id as id, 
                        ct.tag as tag, 
                        ct.display_as as display_as, 
                        ct.description AS description,
                        ct.internal_only AS internal_only, 
                        ct.created AS created, 
                        ct.updated AS updated
                FROM Entities\\CustomerTag ct
                WHERE 1 = 1";

        if( $id ) {
            $dql .= " AND ct.id = " . (int)$id;
        }

        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getArrayResult();
    }


    /**
     * Return an array of all Customer Tags where the array key is the Customer Tag id.
     *
     * @return array An array of all Customer Tag names with the Customer Tag id as the key.
     */
    public function getAsArray(): array {
        $cts = [];
        foreach( self::findAll() as $ct ) {
            $cts[ $ct->getId() ] = $ct->getDisplayAs();
        }

        asort( $cts);

        return $cts;
    }


    /**
     * Return an array of Customer tag for a customer
     *
     * @param int $cid             Customer ID
     *
     * @return array An array of all customers objects
     */
    public function getAllForCustomer( $cid = null ): array {

        $q = "SELECT ct
                FROM Entities\\CustomerTag ct 
                LEFT JOIN ct.customers c
                WHERE c.id = " . $cid;

        $result = [];
        foreach( $this->getEntityManager()->createQuery( $q )->getResult() as $tag ){
            $result[ $tag->getId() ] = $tag;
        }
        return $result;
    }
}
