<?php

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * Layer2Address
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class Layer2Address extends EntityRepository
{
    /**
     * Check if a mac address already exists within a given VLAN
     *
     * @param  string $mac The MAC address to search for
     * @param  int $vlanid The ID of the VLAN to search
     * @return bool true if it exists
     */
    public function existsInVlan( string $mac, int $vlanid ): bool {
        $dql = "SELECT COUNT(l2a.id)
                    FROM Entities\Layer2Address l2a
                    LEFT JOIN l2a.vlanInterface vli
                    LEFT JOIN vli.Vlan v
                    WHERE l2a.mac = ?1 
                        AND v.id = ?2";

        $query = $this->getEntityManager()->createQuery( $dql );
        $query->setParameter( 1, $mac );
        $query->setParameter( 2, $vlanid );
        return ( $query->getSingleScalarResult() > 0 ) ? true : false;
    }

    /**
     * Load all Layer2Addresses (optionally limited to vlan)
     *
     * @param  int $vlid The ID of the VLAN to search
     * @return array Layer2Interface entities
     */
    public function getAll( int $vlid = null ): array {
        $dql = "SELECT l2a
                    FROM Entities\Layer2Address l2a
                    LEFT JOIN l2a.vlanInterface vli
                    LEFT JOIN vli.Vlan vl
                    LEFT JOIN vli.VirtualInterface vi
                    LEFT JOIN vi.Customer c ";

        if( $vlid ){
            $dql .= " WHERE vl.id = $vlid ";
        }

        $dql .= " ORDER BY c.name ASC";

        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getResult();
    }

    /**
     * Get all Layer2Address with interface and OUI organisation details (or a particular one) for listing on the frontend CRUD
     *
     * Returns an array of the form:
     *
     *     array:12 [
     *         "id" "           => 4848209
     *         "firstseen"      => DateTime object
     *         "lastseen"       => null
     *         "mac"            => "00d0ffaaaaaa"
     *         "customerid"     => 101
     *         "customer"       => "Someone"
     *         "viid"           => 203
     *         "switchname"     => "swi2-deg1-4"
     *         "switchport"     => "GigabitEthernet1/1,GigabitEthernet1/2"         // ** NB: multiple's separated by comma
     *         "vlan"           => "Peering VLAN #1"
     *         "vlanid"         => "2"
     *         "vliid"          => "219"
     *         "ip4"            => "194.88.240.33"                                 // ** NB: multiple's separated by comma
     *         "ip6"            => "2001:7f8:18:12::33"                            // ** NB: multiple's separated by comma
     *         "organisation"   => "Cisco Systems, Inc"
     *     ]
     *
     * @see \IXP\Http\Controllers\Doctrine2Frontend
     *
     * @param \stdClass $feParams
     * @param int|null $id
     * @return array Array of Layer2Address entries (as associated arrays) (or single element if `$id` passed)
     */
    public function getAllForFeList( \stdClass $feParams, int $id = null )
    {
        $dql = "SELECT l.mac AS mac, vi.id AS viid, l.id AS id, l.firstseen AS firstseen, l.lastseen AS lastseen,  
                    c.id AS customerid, c.abbreviatedName AS customer,
                    s.name AS switchname, vl.name as vlan, vl.id as vlanid, vli.id as vliid,
                    GROUP_CONCAT( sp.name ) AS switchport, 
                    GROUP_CONCAT( DISTINCT ipv4.address ) AS ip4, 
                    GROUP_CONCAT( DISTINCT ipv6.address ) AS ip6,
                    COALESCE( o.organisation, 'Unknown' ) AS organisation

                FROM Entities\\Layer2Address l
                    JOIN l.vlanInterface vli
                    JOIN vli.Vlan vl
                    LEFT JOIN vli.IPv4Address ipv4
                    LEFT JOIN vli.IPv6Address ipv6
                    JOIN vli.VirtualInterface vi
                    JOIN vi.Customer c
                    LEFT JOIN vi.PhysicalInterfaces pi
                    LEFT JOIN pi.SwitchPort sp
                    LEFT JOIN sp.Switcher s
                    LEFT JOIN Entities\\OUI o WITH SUBSTRING( l.mac, 1, 6 ) = o.oui
                    
                WHERE 1 = 1";

        if( $id ) {
            $dql .= " AND l.id = " . (int)$id;
        }

        $dql .= " GROUP BY l.mac, vi.id, l.id, l.firstseen, l.lastseen, c.id, c.abbreviatedName, s.name, 
                    vl.name, vl.id, vli.id, o.organisation ";

        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY c.abbreviatedName ";
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        return $this->getEntityManager()->createQuery( $dql )->getArrayResult();
    }


    /**
     * Find vlan interface by MAC address
     *
     * MAC address is normaliased using `preg_replace( '/[^a-f0-9]/, '', strtolower( $msc ) ).
     *
     * @param  string $mac The MAC address to search for
     * @return \Entities\VlanInterface[] Matching VLAN nterfaces
     */
    public function findVlanInterface( string $mac )
    {
        return $this->getEntityManager()->createQuery(
            "SELECT vli
        
                 FROM \\Entities\\VlanInterface vli
                 LEFT JOIN vli.layer2Addresses l2a

                 WHERE l2a.mac = :mac"
        )
            ->setParameter( 'mac', preg_replace( '/[^a-f0-9]/', '', strtolower( $mac ) ) )
            ->getResult();
    }

}
