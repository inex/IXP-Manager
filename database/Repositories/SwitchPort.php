<?php

namespace Repositories;

use Doctrine\ORM\EntityRepository;

/**
 * SwitchPort
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class SwitchPort extends EntityRepository
{
    /**
     * Return an array of all switch port names where the array key is the switch port id.
     * @author Yann Robin
     * @return array An array of all switch port names with the switch port id as the key.
     */
    public function getForArray(): array {
        foreach(self::findAll() as $switchPort){
            $listSwitchPort[$switchPort->getId()] = $switchPort->getName();
        }
        return $listSwitchPort;
    }

    public function getCustomerForASwitchPort($switchPortId)
    {
        $dql = "SELECT cu.id
                    FROM \\Entities\\SwitchPort sp
                        LEFT JOIN sp.Switcher s
                        LEFT JOIN sp.PhysicalInterface pi
                        LEFT JOIN pi.VirtualInterface vi 
                        LEFT JOIN vi.Customer cu
                        WHERE sp.id = $switchPortId ";


      return $this->getEntityManager()->createQuery( $dql )->getOneOrNullResult()['id'];
    }


    /**
     * Get all switch ports (or a particular one) for listing on the frontend CRUD
     *
     * @see \IXP\Http\Controller\Doctrine2Frontend
     *
     *
     * @param \stdClass $feParams
     * @param int|null $id
     * @return array Array of switches (as associated arrays) (or single element if `$id` passed)
     */
    public function getAllForFeList( \stdClass $feParams, int $id = null, $params = null )
    {
        $dql = "SELECT  sp.id AS id, 
                        sp.name AS name, 
                        sp.type AS type, 
                        s.id AS switchid,
                        s.name AS switch,
                        sp.ifName AS ifName, 
                        sp.ifAlias AS ifAlias, 
                        sp.ifHighSpeed AS ifHighSpeed,
                        sp.ifMtu AS ifMtu, 
                        sp.ifPhysAddress AS ifPhysAddress, 
                        sp.active AS active,
                        sp.ifAdminStatus AS ifAdminStatus, 
                        sp.ifOperStatus AS ifOperStatus,
                        sp.ifLastChange AS ifLastChange, 
                        sp.lastSnmpPoll AS lastSnmpPoll,
                        sp.lagIfIndex AS lagIfIndex, 
                        sp.ifIndex AS ifIndex
                    FROM Entities\\SwitchPort sp
                    LEFT JOIN sp.Switcher s
                    
                    WHERE 1 = 1";

        if( $id ) {
            $dql .= " AND sp.id = " . (int)$id;
        }


        if( isset( $params[ "params" ][ "switch" ] ) && $params[ "params" ][ "switch" ] ){
            $dql .= " AND s.id = ". $params[ "params" ][ "switch" ];
        }

        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getArrayResult();
    }



    /**
     * Get all the unused optics
     *
     * @return array Array
     */
    public function getUnusedOpticsForFeList( \stdClass $feParams )
    {

        $dql = "SELECT  sp.ifIndex AS ifIndex,
                        s.name AS switch,
                        s.id AS switchid,
                        sp.ifName AS ifName,
                        sp.type AS type,
                        sp.mauType AS mauType,
                        sp.mauState AS mauState,
                        sp.mauJacktype AS mauJacktype
                    FROM Entities\\SwitchPort sp
                    LEFT JOIN sp.Switcher s
                    WHERE s.mauSupported = 1 
                    AND sp.ifOperStatus != 1 
                    AND sp.mauType != '(empty)'
                    AND sp.type != " . \Entities\SwitchPort::TYPE_MANAGEMENT;


        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getArrayResult();

    }


    /**
     * Get all the unused optics
     *
     * @param \stdClass $feParams
     * @param int|null $id
     *
     * @return array Array
     */
    public function getListMau( \stdClass $feParams, int $id = null )
    {

            $dql = "SELECT sp.id AS id, 
                          sp.name AS name, 
                          sp.type AS type, 
                          s.name AS switch,
                          sp.ifName AS ifName, 
                          sp.ifAlias AS ifAlias, 
                          sp.lastSnmpPoll AS lastSnmpPoll,
                          sp.ifAdminStatus AS ifAdminStatus, 
                          sp.ifOperStatus AS ifOperStatus,
                          sp.mauType AS mauType, 
                          sp.mauState AS mauState,
                          sp.mauAvailability AS mauAvailability, 
                          sp.mauJacktype AS mauJacktype,
                          sp.mauAutoNegSupported AS mauAutoNegSupported, 
                          sp.mauAutoNegAdminState AS mauAutoNegAdminState,
                          sp.ifIndex AS ifIndex, 
                          s.id AS switchid
                    FROM Entities\\SwitchPort sp
                    LEFT JOIN sp.Switcher s
                    WHERE 1 = 1";

            if( $id !== null ){
                $dql .= " AND s.id = " . $id ;
            }


        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        return $this->getEntityManager()->createQuery( $dql )->getArrayResult();

    }

    /**
     * Get all the unused optics
     *
     * @return array Array
     */
    public function getOpticInventory( \stdClass $feParams )
    {

        $dql = "SELECT  sp.mauType AS mauType, 
                        COUNT( sp.mauType ) AS cnt 
                    FROM Entities\\SwitchPort sp
                    GROUP BY sp.mauType
                    HAVING cnt > 0";


        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        $query = $this->getEntityManager()->createQuery( $dql );

        return $query->getArrayResult();

    }

    /**
     * Get all the optic for a dedicated MAU TYPE
     *
     * @param \stdClass $feParams
     * @param string|null $mautype
     *
     * @return array Array
     */
    public function getListMauForType( \stdClass $feParams, string $mautype = null )
    {

        $dql = "SELECT sp.id AS id, 
                          sp.name AS name, 
                          sp.type AS type, 
                          s.name AS switch,
                          sp.ifName AS ifName, 
                          sp.ifAdminStatus AS ifAdminStatus, 
                          sp.ifOperStatus AS ifOperStatus,
                          sp.mauType AS mauType, 
                          sp.mauState AS mauState,
                          s.id AS switchid,
                          c.name AS custname,
                          c.id AS custid
                    FROM Entities\\SwitchPort sp
                    LEFT JOIN sp.Switcher s
                    LEFT JOIN sp.PhysicalInterface pi
                    LEFT JOIN pi.VirtualInterface vi
                    LEFT JOIN vi.Customer c
                    WHERE 1 = 1";

        if( $mautype !== null ){
            $dql .= " AND sp.mauType = '" . $mautype . "'";
        } else {
            $dql .= " AND sp.mauType IS NOT NULL";
        }

        if( isset( $feParams->listOrderBy ) ) {
            $dql .= " ORDER BY " . $feParams->listOrderBy . ' ';
            $dql .= isset( $feParams->listOrderByDir ) ? $feParams->listOrderByDir : 'ASC';
        }

        return $this->getEntityManager()->createQuery( $dql )->getArrayResult();

    }

}
