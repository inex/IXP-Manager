<?php

/*
 * Copyright (C) 2009 - 2019 Internet Neutral Exchange Association Company Limited By Guarantee.
 * All Rights Reserved.
 *
 * This file is part of IXP Manager.
 *
 * IXP Manager is free software: you can redistribute it and/or modify it
 * under the terms of the GNU General Public License as published by the Free
 * Software Foundation, version v2.0 of the License.
 *
 * IXP Manager is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GpNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License v2.0
 * along with IXP Manager.  If not, see:
 *
 * http://www.gnu.org/licenses/gpl-2.0.html
 */

namespace Repositories;

use Doctrine\ORM\EntityRepository;

use Entities\{
    CoreBundle as CoreBundleEntity,
    CoreLink as CoreLinkEntity,
    CoreInterface as CoreInterfaceEntity,
    Customer as CustomerEntity
};

use Exception;

/**
 * CoreBundle
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class CoreBundle extends EntityRepository
{

    /**
     * Return all the core bundles for a customer
     *
     * @param CustomerEntity $c
     *
     * @return array
     */
    public function getAllForCustomer( CustomerEntity $c ) {
        return $this->getEntityManager()->createQuery(
            "SELECT cb
                    FROM Entities\\CoreBundle cb
                    LEFT JOIN cb.coreLinks cl
                    LEFT JOIN cl.coreInterfaceSideA ci
                    LEFT JOIN ci.physicalInterface pi
                    LEFT JOIN pi.VirtualInterface vi
                    LEFT JOIN vi.Customer c
                    WHERE c.id = ?1" )
            ->setParameter( 1, $c->getId() )
            ->getResult();
    }


    /**
     * Delete the Core Bundle ans everything related.
     *
     * @param CoreBundleEntity $cb The Core Bundle Object
     *
     * @return bool
     *
     * @throws
     */
    public function delete( CoreBundleEntity $cb): bool {

        try {
            $this->getEntityManager()->getConnection()->beginTransaction();

            foreach( $cb->getCoreLinks() as $cl ){
                /** @var CoreLinkEntity $cl */
                foreach( $cl->getCoreInterfaces() as $ci ){
                    /** @var CoreInterfaceEntity $ci */
                    $pi = $ci->getPhysicalInterface();
                    $vi = $pi->getVirtualInterface();

                    $this->getEntityManager()->remove( $ci );
                    $this->getEntityManager()->remove( $pi );
                    $this->getEntityManager()->remove( $vi );
                }
                $this->getEntityManager()->remove( $cl );
            }

            $this->getEntityManager()->remove( $cb );

            $this->getEntityManager()->flush();
            $this->getEntityManager()->getConnection()->commit();


        } catch( Exception $e ) {
            $this->getEntityManager()->getConnection()->rollBack();
            throw $e;
        }

        return true;
    }
}
