
{* NB - USED FOR BOTH ADMIN AND CUSTOMER VIEW - BEWARE OF SECURITY *}

<div class="row-fluid">

    <div class="span6">

    <h3>
        Connection {counter name=numconnections}

        {assign var='vlanints' value=$vi->getVlanInterfaces()}

        {if count( $vlanints ) }
            {assign var='vlanint' value=$vlanints.0}
        {else}
            {assign var='vlanint' value=0}
        {/if}

        <small>
            {assign var=physInts value=$vi->getPhysicalInterfaces()}
            {if $vi->getType() eq SWITCHPORT::TYPE_PEERING and  count( $physInts )}
                &nbsp;&nbsp;&nbsp;&nbsp;{$physInts[0]->getSwitchPort()->getSwitcher()->getInfrastructure()->getName()}
            {elseif $vi->getType() eq SWITCHPORT::TYPE_FANOUT}
                &nbsp;&nbsp;&nbsp;&nbsp;Reseller Fanout

                {if count( $physInts ) and $physInts[0]->getRelatedInterface()}
                    for <a

                    {if $user->getPrivs() eq USER::AUTH_SUPERUSER}
                        href="{genUrl controller="customer" action="overview" id=$physInts[0]->getRelatedInterface()->getVirtualInterface()->getCustomer()->getId()}"
                    {else}
                        href="{genUrl controller="customer" action="detail" id=$physInts[0]->getRelatedInterface()->getVirtualInterface()->getCustomer()->getId()}"
                    {/if}

                    >{$physInts[0]->getRelatedInterface()->getVirtualInterface()->getCustomer()->getAbbreviatedName()}</a>
                {else}
                    <em>(unassigned)</em>
                {/if}

            {elseif $vi->getType() eq SWITCHPORT::TYPE_RESELLER}
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;Resller Uplink
            {/if}

            {if $vi->getPhysicalInterfaces()|@count > 1}
                {assign var='isLAG' value=1}
                &nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;LAG Port
            {else}
                {tmplinclude file='customer/overview-tabs/ports/physintstatus.phtml' pi=$physInts[0]}
                {assign var='isLAG' value=0}
            {/if}
        </small>

        {if $user->getPrivs() eq USER::AUTH_SUPERUSER}
            <div class="btn-group" style="padding-left: 20px;">
                <a class="btn btn-mini have-tooltip-below" href="{genUrl controller='interfaces/virtual' edit=$vi->getId()}" title="Edit"><i class="icon-pencil"></i></a>
            </div>
        {/if}

    </h3>

    {counter name=numphysports print=0 start=0}
    {foreach $vi->getPhysicalInterfaces() as $pi}

        {if $isLAG}
            <h5>
                Port {counter name=numphysports} of {$vi->getPhysicalInterfaces()|@count} in LAG
                {tmplinclude file='customer/overview-tabs/ports/physintstatus.phtml'}
            </h5>
        {/if}

        <table id="myDetailsTable">
            {if $multiIXP}
                <tr>
                    <td width="200"><strong>IXP:</strong></td>
                    <td width="200" id="value">
                        {$pi->getSwitchPort()->getSwitcher()->getInfrastructure()->getIXP()->getName()}
                    </td>
                    <td width="40"></td>
                    <td width="200"></td>
                    <td width="200" id="value"></td>
                </tr>
            {/if}
            <tr>
                <td width="200"><strong>Switch:</strong></td>
                <td width="200" id="value">{$pi->getSwitchPort()->getSwitcher()->getName()}</td>
                <td width="40"></td>
                <td width="200"><strong>Switch Port:</strong></td>
                <td width="200" id="value">{$pi->getSwitchPort()->getName()}</td>
            </tr>
            <tr>
                <td><strong>Speed:</strong></td>
                <td id="value">
                    {$pi->resolveSpeed()} {if $pi->getDuplex() neq 'full'}(HD){/if}
                </td>
                <td></td>
                {if $pi->getSwitchPort()->getSwitcher()->getMauSupported()}
                    <td><strong>Media:</strong></td>
                    <td id="value">{$pi->getSwitchPort()->getMauType()}</td>
                {else}
                    <td><strong>Duplex:</strong></td>
                    <td id="value">{$pi->getDuplex()}</td>
                {/if}
            </tr>
            {if $pi->getSwitchPort()->getSwitcher()->getCabinet()}
            <tr>
                <td><strong>Location:</strong></td>
                <td id="value">{$pi->getSwitchPort()->getSwitcher()->getCabinet()->getLocation()->getName()}</td>
                <td></td>
                <td><strong>Colo Cabinet ID:</strong></td>
                <td id="value">{$pi->getSwitchPort()->getSwitcher()->getCabinet()->getName()}</td>
            </tr>
            {/if}
            {if $pi->getSwitchPort()->getPatchPanelPort()}
            <tr>
                <td><strong>XConnect Port:</strong></td>
                <td id="value">{$pi->getSwitchPort()->getPatchPanelPort()->getPatchPanel()->getColoReference()} - <a href="{genUrl controller="patch-panel-port" action="list" patch-panel=$pi->getSwitchPort()->getPatchPanelPort()->getPatchPanel()->getId()}">{$pi->getSwitchPort()->getPatchPanelPort()->getName()}</a></td>
                <td></td>
                <td><strong>XConnect Status:</strong></td>
                <td id="value">
                    {$pi->getSwitchPort()->getPatchPanelPort()->resolveStates()}
                    {if $pi->getSwitchPort()->getPatchPanelPort()->getState() == \Entities\PatchPanelPort::STATE_CONNECTED}
                        {$pi->getSwitchPort()->getPatchPanelPort()->getConnectedAtFormated()}
                    {/if}
                </td>
            </tr>
            {/if}
            <tr>
                <td></td><td></td><td></td><td></td><td></td>
            </tr>
        </table>
    {foreachelse}
        <p>
            No physical interfaces defined.
            {if $user->getPrivs() eq USER::AUTH_SUPERUSER}
                <a href="{genUrl controller="physical-interface" action="add" vintid=$vi->getId()}">Add one...</a>
            {/if}
        </p>
    {/foreach}

    <br /><br />

    {foreach $vi->getVlanInterfaces() as $vli}
        {assign var='vlanid' value=$vli->getVlan()->getId()}

        {if $vli->getVlan()->getPrivate()}

            {if !isset( $pvlans )}
                {$pvlans = $cust->getPrivateVlanDetails()}
            {/if}

            <h4>
                &nbsp;&nbsp;&nbsp;Private VLAN Service
                <small>{$options.identity.orgname} Reference: #{$vli->getVlan()->getId()}</small>
            </h4>

            <table id="myDetailsTable">

            <tr>
                <td width="40"></td>
                <td width="80"><strong>Name</strong></td>
                <td width="150" id="value">{$vli->getVlan()->getName()}</td>
                {if $multiIXP}
                    <td width="20"></td>
                    <td width="60"><strong>IXP</strong></td>
                    <td width="150" id="value">{$vli->getVlan()->getInfrastructure()->getIXP()->getName()}</td>
                {/if}
                <td width="20"></td>
                <td width="80"><strong>Tag</strong></td>
                <td width="80" id="value">{$vli->getVlan()->getNumber()}</td>
                <td width="20"></td>
                <td width="150"><strong>Other Members:</strong></td>
                <td width="400" id="value">
                    {if count( $pvlans[ $vli->getVlan()->getId() ].members ) == 1}
                        <em>None - single member</em>
                    {else}
                        {foreach $pvlans[ $vli->getVlan()->getId() ].members as $m}
                            {$m->getAbbreviatedName()}<br />
                        {/foreach}
                    {/if}
                </td>
            </tr>

            </table>
            <br /><br />

        {else}
            <h4>&nbsp;&nbsp;&nbsp;{$vli->getVlan()->getName()}:</h4>

            <table id="myDetailsTable">

            <tr>
                <td width="40"></td>
                <td width="200"><strong>IPv6 Address:</strong></td>
                <td width="200" id="value">
                    {if $vli->getIpv6enabled() and $vli->getIpv6address()}
                        {$vli->getIPv6Address()->getAddress()}{if isset( $netinfo.$vlanid) }/{$netinfo.$vlanid.6.masklen}{/if}
                    {else}
                        IPv6 not enabled.
                    {/if}
                </td>
                <td width="40"></td>
                <td width="200"><strong>IPv4 Address:</strong></td>
                <td width="200" id="value">
                    {if $vli->getIpv4enabled() and $vli->getIpv4address()}
                        {$vli->getIPv4Address()->getAddress()}{if isset( $netinfo.$vlanid) }/{$netinfo.$vlanid.4.masklen}{/if}
                    {else}
                        IPv4 not enabled.
                    {/if}
                </td>
            </tr>

            <tr>
                <td></td><td></td><td></td><td></td><td></td><td></td>
            </tr>

            <tr>
                <td></td>
                <td><strong>Multicast Enabled:</strong></td>
                <td id="value">{if $vli->getMcastenabled()}Yes{else}No{/if}</td>
                <td></td>
                <td><strong>Mac Address:</strong></td>
                <td id="value">
                    {foreach $vli->getLayer2AddressesAsArray() as $l2a}
                        {$l2a}<br />
                    {/foreach}
                    {if count( $vli->getLayer2AddressesAsArray() ) > 0 && config( 'ixp_fe.layer2-addresses.customer_can_edit' ) }
                        <a href="{route( "Layer2AddressController@forVlanInterface", [ "id" => {$vli->getId()} ] )}">Edit</a>
                    {/if}
                </td>
            </tr>

            <tr>
                <td></td><td></td><td></td><td></td><td></td><td></td>
            </tr>

            <tr>
                <td></td>
                <td><strong>Route Server Client:</strong></td>
                <td id="value">{if $vli->getRsclient()}Yes{else}No{/if}</td>
                <td></td>

            </tr>
                <tr>
                    <td></td>
                    {if $as112UiActive}
                        <td><strong>AS112 Client:</strong></td>
                        <td id="value">{if $vli->getAs112client()}Yes{else}No{/if}</td>
                    {else}
                        <td></td>
                        <td></td>
                    {/if}
                </tr>

            </table>

        {/if} {* end private VLAN? *}

    {foreachelse}
        {if $vi->getType() eq SWITCHPORT::TYPE_PEERING}
            <p>
                No VLAN interfaces defined.
                {if $user->getPrivs() eq USER::AUTH_SUPERUSER}
                    <a href="{genUrl controller="vlan-interface" action="add" vintid=$vi->getId()}">Add one...</a>
                {/if}
            </p>
        {/if}
    {/foreach}

    <br /><br />

    </div>
    <div class="span6">

        {if $isLAG and $vi->isGraphable()}
            <br /><br />
            <div class="well">
                <h4>
                    Aggregate Day Graph for LAG
                    <a class="btn btn-default pull-right" href="{genUrl controller="statistics" action="member-drilldown"}/vi/{$vi->getId()}">
                        <i class="icon-zoom-in"></i>
                    </a>
                </h4>
                <br />
                {$grapher->virtint( $vi )->renderer()->boxLegacy()}
            </div>
        {/if}

        {foreach $vi->getPhysicalInterfaces() as $pi}
            {if not $pi->isGraphable()}
                {continue}
            {/if}

            <br /><br />
            <div class="well">
                <h4>
                    Day Graph for {$pi->getSwitchPort()->getSwitcher()->getName()} / {$pi->getSwitchPort()->getName()}
                    <a class="btn btn-default pull-right" href="{genUrl controller="statistics" action="member-drilldown"}/pi/{$pi->getId()}">
                        <i class="icon-zoom-in"></i>
                    </a>
                </h4>
                <br />
                {$grapher->physint( $pi )->renderer()->boxLegacy()}
            </div>
        {/foreach}
    </div>
</div>
