{*
    Bird Route Server Configuration Templates

    Please see: https://github.com/inex/IXP-Manager/wiki/Route-Server

    You should not need to edit these files - instead use your own custom skins. If
    you can't effect the changes you need with skinning, consider posting to the mailing
    list to see if it can be achieved / incorporated.

    Skinning: https://github.com/inex/IXP-Manager/wiki/Skinning


    Bird configuration template from Nick Hilliard - nick@inex.ie

*}
# Bird Route Server configuration generated by IXP Manager
#
# Do not edit this file, it will be overwritten. Please see:
#
# https://github.com/inex/IXP-Manager/wiki/Route-Server
#
# Generated: {$smarty.now|date_format:'Y-m-d H:i:s'}
#

# For VLAN: {$vlan->getName()} (Tag: {$vlan->getNumber()}, Database ID: {$vlan->getId()})


log "{#rsconfLogfile#}" all;
log syslog all;

define routeserverasn = {#rsconfASN#};
define routeserveraddress = {#rsconfListenAddr#};

router id {#rsconfRouterID#};
listen bgp address {#rsconfListenAddr#};

# ignore interface up/down events
protocol device { }

# This function excludes weird networks
#  rfc1918, class D, class E, too long and too short prefixes
function avoid_martians()
prefix set martians;
{
    {if $proto eq 6}

        martians = [
                ::/0,                   # Default (can be advertised as a route in BGP to peers if desired)
                ::/96,                  # IPv4-compatible IPv6 address <E2><80><93> deprecated by RFC4291
                ::/128,                 # Unspecified address
                ::1/128,                # Local host loopback address
                ::ffff:0.0.0.0/96+,     # IPv4-mapped addresses
                ::224.0.0.0/100+,       # Compatible address (IPv4 format)
                ::127.0.0.0/104+,       # Compatible address (IPv4 format)
                ::0.0.0.0/104+,         # Compatible address (IPv4 format)
                ::255.0.0.0/104+,       # Compatible address (IPv4 format)
                0000::/8+,              # Pool used for unspecified, loopback and embedded IPv4 addresses
                0200::/7+,              # OSI NSAP-mapped prefix set (RFC4548) <E2><80><93> deprecated by RFC4048
                3ffe::/16+,             # Former 6bone, now decommissioned
                2001:db8::/32+,         # Reserved by IANA for special purposes and documentation
                2002:e000::/20+,        # Invalid 6to4 packets (IPv4 multicast)
                2002:7f00::/24+,        # Invalid 6to4 packets (IPv4 loopback)
                2002:0000::/24+,        # Invalid 6to4 packets (IPv4 default)
                2002:ff00::/24+,        # Invalid 6to4 packets
                2002:0a00::/24+,        # Invalid 6to4 packets (IPv4 private 10.0.0.0/8 network)
                2002:ac10::/28+,        # Invalid 6to4 packets (IPv4 private 172.16.0.0/12 network)
                2002:c0a8::/32+,        # Invalid 6to4 packets (IPv4 private 192.168.0.0/16 network)
                fc00::/7+,              # Unicast Unique Local Addresses (ULA) <E2><80><93> RFC 4193
                fe80::/10+,             # Link-local Unicast
                fec0::/10+,             # Site-local Unicast <E2><80><93> deprecated by RFC 3879 (replaced by ULA)
                ff00::/8+               # Multicast
        ];

     {else}

        martians = [
                10.0.0.0/8+,
                169.254.0.0/16+,
                172.16.0.0/12+,
                192.0.0.0/24+,
                192.0.2.0/24+,
                192.168.0.0/16+,
                198.18.0.0/15+,
                198.51.100.0/24+,
                203.0.113.0/24+,
                224.0.0.0/4+,
                240.0.0.0/4+,
                0.0.0.0/32-,
                0.0.0.0/0{ldelim}25,32{rdelim},
                0.0.0.0/0{ldelim}0,7{rdelim}
        ];

     {/if}

        # Avoid RFC1918 and similar networks
        if net ~ martians then
                return false;

        return true;
}

##
## facilitate graceful shutdown
## https://tools.ietf.org/html/draft-ietf-grow-bgp-gshut-06

function honor_graceful_shutdown() {
        if (65535, 0) ~ bgp_community then
                bgp_local_pref = 0;
}

##
## Standard IXP community filter
##

function ixp_community_filter(int peerasn)
{
        if !(source = RTS_BGP) then
                return false;

        # default community filtering schema doesn't support ASN32, as there
        # are only 6 octets available for numbering.  We need
        # draft-raszuk-wide-bgp-communities to become reality.

        if peerasn > 65535 then
                return true;

        # Implement widely used community filtering schema.
        if (0, peerasn) ~ bgp_community then
                return false;
        if (routeserverasn, peerasn) ~ bgp_community then
                return true;
        if (0, routeserverasn) ~ bgp_community then
                return false;

        return true;
}

##
## Route Server client configuration
##

template bgp tb_rsclient {
        local as routeserverasn;
        source address routeserveraddress;
{if $proto eq 4}
        import filter {
                ## Prevent BGP NEXT_HOP Hijacking
                if !( from = bgp_next_hop ) then
                    reject "BGP neighbor address [", from, "] != next hop address [", bgp_next_hop, "]", ", net:[", net, "], path:[", bgp_path, "]";
                    
                accept;
        };
{else}
        import all;
{/if}
        export all;
        rs client;
{if $proto eq 6}
        missing lladdr ignore;
{/if}        
}


