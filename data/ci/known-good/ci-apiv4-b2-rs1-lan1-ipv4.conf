
#
# Bird v2 Route Server configuration generated by IXP Manager
#
# Do not edit this file, it will be overwritten. Please see:
#
# https://github.com/inex/IXP-Manager/wiki/Route-Server
#
# Generated: 2019-03-09 15:41:31
#

# For VLAN: Peering LAN 1 (Tag: 1, Database ID: 1)

# standardise time formats:
timeformat base         iso long;
timeformat log          iso long;
timeformat protocol     iso long;
timeformat route        iso long;


log "/var/log/bird/b2-rs1-lan1-ipv4.log" all;
log syslog all;

define routeserverasn     = 65501;
define routeserveraddress = 192.0.2.18;


router id 192.0.2.18;

# ignore interface up/down events
protocol device { }

# This function excludes weird networks
#  rfc1918, class D, class E, too long and too short prefixes
function avoid_martians()
prefix set martians;
{

        martians = [
                0.0.0.0/32-,            # rfc5735 Special Use IPv4 Addresses
                0.0.0.0/0{0,7},         # rfc1122 Requirements for Internet Hosts -- Communication Layers 3.2.1.3
                10.0.0.0/8+,            # rfc1918 Address Allocation for Private Internets
                100.64.0.0/10+,         # rfc6598 IANA-Reserved IPv4 Prefix for Shared Address Space
                127.0.0.0/8+,           # rfc1122 Requirements for Internet Hosts -- Communication Layers 3.2.1.3
                169.254.0.0/16+,        # rfc3927 Dynamic Configuration of IPv4 Link-Local Addresses
                172.16.0.0/12+,         # rfc1918 Address Allocation for Private Internets
                192.0.0.0/24+,          # rfc6890 Special-Purpose Address Registries
                192.0.2.0/24+,          # rfc5737 IPv4 Address Blocks Reserved for Documentation
                192.168.0.0/16+,        # rfc1918 Address Allocation for Private Internets
                198.18.0.0/15+,         # rfc2544 Benchmarking Methodology for Network Interconnect Devices
                198.51.100.0/24+,       # rfc5737 IPv4 Address Blocks Reserved for Documentation
                203.0.113.0/24+,        # rfc5737 IPv4 Address Blocks Reserved for Documentation
                224.0.0.0/4+,           # rfc1112 Host Extensions for IP Multicasting
                240.0.0.0/4+            # rfc6890 Special-Purpose Address Registries
        ];


        # Avoid RFC1918 and similar networks
        if net ~ martians then
                return false;

        return true;
}


########################################################################################
########################################################################################
#
# Community filtering definitions for use with looking glasses
#
# Current implementation based on:
#
# https://github.com/euro-ix/rs-workshop-july-2017/wiki/Route-Server-BGP-Community-usage
#
########################################################################################
########################################################################################



# These will all be filtered and not piped to the master table:

define IXP_LC_FILTERED_PREFIX_LEN_TOO_LONG      = ( routeserverasn, 1101, 1  );
define IXP_LC_FILTERED_PREFIX_LEN_TOO_SHORT     = ( routeserverasn, 1101, 2  );
define IXP_LC_FILTERED_BOGON                    = ( routeserverasn, 1101, 3  );
define IXP_LC_FILTERED_BOGON_ASN                = ( routeserverasn, 1101, 4  );
define IXP_LC_FILTERED_AS_PATH_TOO_LONG         = ( routeserverasn, 1101, 5  );
define IXP_LC_FILTERED_AS_PATH_TOO_SHORT        = ( routeserverasn, 1101, 6  );
define IXP_LC_FILTERED_FIRST_AS_NOT_PEER_AS     = ( routeserverasn, 1101, 7  );
define IXP_LC_FILTERED_NEXT_HOP_NOT_PEER_IP     = ( routeserverasn, 1101, 8  );
define IXP_LC_FILTERED_IRRDB_PREFIX_FILTERED    = ( routeserverasn, 1101, 9  );
define IXP_LC_FILTERED_IRRDB_ORIGIN_AS_FILTERED = ( routeserverasn, 1101, 10 );
define IXP_LC_FILTERED_PREFIX_NOT_IN_ORIGIN_AS  = ( routeserverasn, 1101, 11 );

define IXP_LC_FILTERED_RPKI_UNKNOWN             = ( routeserverasn, 1101, 12 );
define IXP_LC_FILTERED_RPKI_INVALID             = ( routeserverasn, 1101, 13 );
define IXP_LC_FILTERED_TRANSIT_FREE_ASN         = ( routeserverasn, 1101, 14 );
define IXP_LC_FILTERED_TOO_MANY_COMMUNITIES     = ( routeserverasn, 1101, 15 );




# Informational prefixes

define IXP_LC_INFO_RPKI_VALID       = ( routeserverasn, 1000, 1  );
define IXP_LC_INFO_RPKI_UNKNOWN     = ( routeserverasn, 1000, 2  );
define IXP_LC_INFO_RPKI_NOT_CHECKED = ( routeserverasn, 1000, 3  );

define IXP_LC_INFO_IRRDB_VALID         = ( routeserverasn, 1001, 1  );
define IXP_LC_INFO_IRRDB_NOT_CHECKED   = ( routeserverasn, 1001, 2  );
define IXP_LC_INFO_IRRDB_MORE_SPECIFIC = ( routeserverasn, 1001, 3  );

define IXP_LC_INFO_IRRDB_FILTERED_LOOSE  = ( routeserverasn, 1001, 1000 );
define IXP_LC_INFO_IRRDB_FILTERED_STRICT = ( routeserverasn, 1001, 1001 );
define IXP_LC_INFO_IRRDB_PREFIX_EMPTY    = ( routeserverasn, 1001, 1002 );

define IXP_LC_INFO_SAME_AS_NEXT_HOP = ( routeserverasn, 1001, 1200 );

# ( routeserverasn, 1010, peerasn ) -> route learnt from peerasn via routeserverasn
# ( routeserverasn, 1011, originasn ) -> route origin asn via routeserverasn


# And the filter for examining routes in the peers import table being exported
# to the master table

filter f_export_to_master
{

    if bgp_large_community ~ [( routeserverasn, 1101, * )] then reject;

    accept;
}






########################################################################################
########################################################################################
#
# Standard IXP community filter
#
########################################################################################
########################################################################################


function ixp_community_filter(int peerasn)
{
    if !(source = RTS_BGP) then
            return false;

    # AS path prepending
    if (routeserverasn, 103, peerasn) ~ bgp_large_community then {
        bgp_path.prepend( bgp_path.first );
        bgp_path.prepend( bgp_path.first );
        bgp_path.prepend( bgp_path.first );
    } else if (routeserverasn, 102, peerasn) ~ bgp_large_community then {
        bgp_path.prepend( bgp_path.first );
        bgp_path.prepend( bgp_path.first );
    } else if (routeserverasn, 101, peerasn) ~ bgp_large_community then {
        bgp_path.prepend( bgp_path.first );
    } else if (routeserverasn, 103, 0) ~ bgp_large_community then {
        bgp_path.prepend( bgp_path.first );
        bgp_path.prepend( bgp_path.first );
        bgp_path.prepend( bgp_path.first );
    } else if (routeserverasn, 102, 0) ~ bgp_large_community then {
        bgp_path.prepend( bgp_path.first );
        bgp_path.prepend( bgp_path.first );
    } else if (routeserverasn, 101, 0) ~ bgp_large_community then {
        bgp_path.prepend( bgp_path.first );
    }


    # support for BGP Large Communities
    if (routeserverasn, 0, peerasn) ~ bgp_large_community then
            return false;
    if (routeserverasn, 1, peerasn) ~ bgp_large_community then
            return true;
    if (routeserverasn, 0, 0) ~ bgp_large_community then
            return false;
    if (routeserverasn, 1, 0) ~ bgp_large_community then
            return true;

    # it's unwise to conduct a 32-bit check on a 16-bit value
    if routeserverasn > 65535 || peerasn > 65535 then
            return true;

    # Implement widely used community filtering schema.
    if (0, peerasn) ~ bgp_community then
            return false;
    if (routeserverasn, peerasn) ~ bgp_community then
            return true;
    if (0, routeserverasn) ~ bgp_community then
            return false;

    return true;
}




########################################################################################
########################################################################################
#
# RPKI protocol configuration
#
########################################################################################
########################################################################################


roa4 table t_roa;

protocol rpki rpki1 {

    roa4 { table t_roa; };

    remote "10.39.5.123" port 3323;

    retry keep 90;
    refresh keep 900;
    expire keep 172800;
}


protocol rpki rpki2 {

    roa4 { table t_roa; };

    remote "10.39.5.124" port 3323;

    retry keep 90;
    refresh keep 900;
    expire keep 172800;
}


/*
 * RPKI check for the path
 *
 * return: true means the filter should stop processing, false means keep processing
 */
function filter_rpki()
{
    # RPKI check
    if( roa_check( t_roa, net, bgp_path.last_nonaggregated ) = ROA_INVALID ) then {
        print "Tagging invalid ROA ", net, " for ASN ", bgp_path.last;
        bgp_large_community.add( IXP_LC_FILTERED_RPKI_INVALID );
        return true;
    }

    if( roa_check( t_roa, net, bgp_path.last_nonaggregated ) = ROA_VALID ) then {
        bgp_large_community.add( IXP_LC_INFO_RPKI_VALID );
        return true;
    }

    # RPKI unknown, keep checking and mark as unknown for info
    bgp_large_community.add( IXP_LC_INFO_RPKI_UNKNOWN );

    return false;
}





########################################################################################
########################################################################################
#
# Filter known transit networks
#
# Inspired by: http://bgpfilterguide.nlnog.net/guides/no_transit_leaks/
#
########################################################################################
########################################################################################


define TRANSIT_ASNS = [ 174, 701, 1299, 2914, 3257, 3320, 3356, 3491, 4134, 5511, 6453, 6461, 6762, 6830, 7018 ];

function filter_has_transit_path()
int set transit_asns;
{
    transit_asns = TRANSIT_ASNS;
    if (bgp_path ~ transit_asns) then {
        bgp_large_community.add( IXP_LC_FILTERED_TRANSIT_FREE_ASN );
        return true;
    }

    return false;
}


########################################################################################
########################################################################################
#
# Route Server client configuration
#
########################################################################################
########################################################################################


template bgp tb_rsclient {
    local as routeserverasn;
    source address routeserveraddress;
    strict bind yes;

    # give RPKI-RTR a chance to start and populate
    # (RPKI is /really/ quick)
    connect delay time 30;

    ipv4 {
        export all;
    };

    rs client;
}




########################################################################################
########################################################################################
#
# Route server clients
#
########################################################################################
########################################################################################


########################################################################################
########################################################################################
###
### AS42 - PCH DNS - VLAN Interface #3

ipv4 table t_0003_as42;



filter f_import_as42
prefix set allnet;
ip set allips;
int set allas;
{


    # Filter small prefixes
    if ( net ~ [ 0.0.0.0/0{25,32} ] ) then {
        bgp_large_community.add( IXP_LC_FILTERED_PREFIX_LEN_TOO_LONG );
        accept;
    }


    if !(avoid_martians()) then {
        bgp_large_community.add( IXP_LC_FILTERED_BOGON );
        accept;
    }

    # Belt and braces: must have at least one ASN in the path
    if( bgp_path.len < 1 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_AS_PATH_TOO_SHORT );
        accept;
    }

    # Peer ASN == route's first ASN?
    if (bgp_path.first != 42 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_FIRST_AS_NOT_PEER_AS );
        accept;
    }

    # set of all IPs this ASN uses to peer with on this VLAN
    allips = [ 10.1.0.36 ];

    # Prevent BGP NEXT_HOP Hijacking
    if !( from = bgp_next_hop ) then {

        # need to differentiate between same ASN next hop or actual next hop hijacking
        if( bgp_next_hop ~ allips ) then {
            bgp_large_community.add( IXP_LC_INFO_SAME_AS_NEXT_HOP );
        } else {
            # looks like hijacking (intentional or not)
            bgp_large_community.add( IXP_LC_FILTERED_NEXT_HOP_NOT_PEER_IP );
            accept;
        }
    }


    # Filter Known Transit Networks
    if filter_has_transit_path() then accept;

    # Belt and braces: no one needs an ASN path with > 64 hops, that's just broken
    if( bgp_path.len > 64 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_AS_PATH_TOO_LONG );
        accept;
    }


        
    allas = [ 27,    42,    187,   297,   715,   3856,  7251,  13202, 16327, 16668,
              16686, 20144, 20539, 21312, 24999, 27678, 32978, 32979, 35160, 38052,
              44876, 45170, 45494, 48582, 48892, 50843, 51874, 52234, 52306, 54145,
              59464, 60313, 197058
    ];


    # Ensure origin ASN is in the neighbors AS-SET
    if !(bgp_path.last_nonaggregated ~ allas) then {
        bgp_large_community.add( IXP_LC_FILTERED_IRRDB_ORIGIN_AS_FILTERED );
        accept;
    }



    # RPKI test - if it's INVALID or VALID, we are done
    if filter_rpki() then accept;




    allnet = [ 31.135.128.0/19,          31.135.128.0/21,          31.135.136.0/21,          31.135.144.0/22,
               31.135.148.0/22,          31.135.152.0/22,          31.135.152.0/23,          31.135.154.0/23,
               36.0.4.0/22,              63.246.32.0/20,           64.68.192.0/20,           64.68.192.0/24,
               64.68.193.0/24,           64.68.194.0/24,           64.68.195.0/24,           64.68.196.0/24,
               64.78.200.0/21,           64.185.240.0/20,          65.22.4.0/24,             65.22.5.0/24,
               65.22.19.0/24,            65.22.23.0/24,            65.22.27.0/24,            65.22.31.0/24,
               65.22.35.0/24,            65.22.39.0/24,            65.22.47.0/24,            65.22.51.0/24,
               65.22.55.0/24,            65.22.59.0/24,            65.22.63.0/24,            65.22.67.0/24,
               65.22.71.0/24,            65.22.79.0/24,            65.22.83.0/24,            65.22.87.0/24,
               65.22.91.0/24,            65.22.95.0/24,            65.22.99.0/24,            65.22.103.0/24,
               65.22.107.0/24,           65.22.111.0/24,           65.22.115.0/24,           65.22.119.0/24,
               65.22.123.0/24,           65.22.127.0/24,           65.22.131.0/24,           65.22.135.0/24,
               65.22.139.0/24,           65.22.143.0/24,           65.22.147.0/24,           65.22.151.0/24,
               65.22.155.0/24,           65.22.159.0/24,           65.22.163.0/24,           65.22.171.0/24,
               65.22.175.0/24,           65.22.179.0/24,           65.22.183.0/24,           65.22.187.0/24,
               65.22.191.0/24,           65.22.195.0/24,           65.22.199.0/24,           65.22.203.0/24,
               65.22.207.0/24,           65.22.211.0/24,           65.22.215.0/24,           65.22.219.0/24,
               65.22.223.0/24,           65.22.227.0/24,           65.22.231.0/24,           65.22.235.0/24,
               65.22.239.0/24,           65.22.243.0/24,           65.22.247.0/24,           66.96.112.0/20,
               66.102.32.0/20,           66.175.104.0/24,          66.185.112.0/20,          66.225.199.0/24,
               66.225.200.0/24,          66.225.201.0/24,          67.21.37.0/24,            67.22.112.0/21,
               67.158.48.0/20,           68.65.112.0/21,           68.65.126.0/23,           68.65.126.0/24,
               68.65.127.0/24,           69.166.10.0/24,           69.166.12.0/22,           70.40.0.0/21,
               70.40.8.0/21,             72.0.48.0/20,             72.0.48.0/24,             72.0.49.0/24,
               72.0.50.0/24,             72.0.51.0/24,             72.0.52.0/24,             72.0.53.0/24,
               72.0.54.0/24,             72.0.55.0/24,             72.0.56.0/24,             72.0.57.0/24,
               72.0.58.0/24,             72.0.59.0/24,             72.0.60.0/24,             72.0.61.0/24,
               72.0.62.0/24,             72.0.63.0/24,             72.42.112.0/20,           72.42.112.0/24,
               72.42.113.0/24,           72.42.114.0/24,           72.42.115.0/24,           72.42.116.0/24,
               72.42.117.0/24,           72.42.118.0/24,           72.42.119.0/24,           72.42.120.0/24,
               72.42.121.0/24,           72.42.122.0/24,           72.42.123.0/24,           72.42.124.0/24,
               72.42.125.0/24,           72.42.126.0/24,           72.42.127.0/24,           74.63.16.0/20,
               74.63.16.0/24,            74.63.17.0/24,            74.63.18.0/24,            74.63.19.0/24,
               74.63.20.0/24,            74.63.21.0/24,            74.63.22.0/24,            74.63.23.0/24,
               74.63.24.0/24,            74.63.25.0/24,            74.63.26.0/24,            74.63.27.0/24,
               74.80.64.0/18,            74.80.64.0/24,            74.80.65.0/24,            74.80.66.0/24,
               74.80.67.0/24,            74.80.68.0/24,            74.80.69.0/24,            74.80.70.0/24,
               74.80.71.0/24,            74.80.72.0/24,            74.80.73.0/24,            74.80.74.0/24,
               74.80.75.0/24,            74.80.76.0/24,            74.80.77.0/24,            74.80.78.0/24,
               74.80.79.0/24,            74.80.80.0/24,            74.80.81.0/24,            74.80.82.0/24,
               74.80.83.0/24,            74.80.84.0/24,            74.80.85.0/24,            74.80.86.0/24,
               74.80.87.0/24,            74.80.88.0/24,            74.80.89.0/24,            74.80.90.0/24,
               74.80.91.0/24,            74.80.92.0/24,            74.80.93.0/24,            74.80.94.0/24,
               74.80.95.0/24,            74.80.96.0/24,            74.80.97.0/24,            74.80.98.0/24,
               74.80.99.0/24,            74.80.100.0/24,           74.80.101.0/24,           74.80.102.0/24,
               74.80.103.0/24,           74.80.104.0/24,           74.80.105.0/24,           74.80.106.0/24,
               74.80.107.0/24,           74.80.108.0/24,           74.80.109.0/24,           74.80.110.0/24,
               74.80.111.0/24,           74.80.112.0/24,           74.80.113.0/24,           74.80.114.0/24,
               74.80.115.0/24,           74.80.116.0/24,           74.80.117.0/24,           74.80.118.0/24,
               74.80.119.0/24,           74.80.120.0/24,           74.80.121.0/24,           74.80.122.0/24,
               74.80.123.0/24,           74.80.124.0/24,           74.80.125.0/24,           74.80.126.0/23,
               74.80.126.0/24,           74.80.127.0/24,           74.118.212.0/24,          74.118.213.0/24,
               74.118.214.0/23,          75.127.16.0/20,           76.191.16.0/20,           89.19.120.0/21,
               89.19.120.0/22,           89.19.124.0/23,           89.19.126.0/23,           91.201.224.0/22,
               91.201.224.0/23,          91.201.224.0/24,          91.201.225.0/24,          91.201.226.0/23,
               91.201.226.0/24,          91.201.227.0/24,          91.209.1.0/24,            91.209.193.0/24,
               91.222.16.0/22,           91.222.40.0/24,           91.222.41.0/24,           91.222.42.0/24,
               91.222.43.0/24,           91.241.93.0/24,           93.95.24.0/21,            93.95.24.0/24,
               93.95.25.0/24,            93.95.26.0/24,            93.171.128.0/22,          95.47.163.0/24,
               101.251.4.0/22,           114.69.222.0/24,          128.8.0.0/16,             128.161.0.0/16,
               129.2.0.0/16,             130.135.0.0/16,           130.167.0.0/16,           131.161.128.0/18,
               131.182.0.0/16,           139.229.0.0/16,           140.169.0.0/16,           146.5.0.0/16,
               146.58.0.0/16,            150.144.0.0/16,           156.154.43.0/24,          156.154.50.0/24,
               156.154.59.0/24,          156.154.96.0/24,          156.154.99.0/24,          158.154.0.0/16,
               169.222.0.0/24,           183.91.132.0/22,          192.5.41.0/24,            192.12.123.0/24,
               192.42.70.0/24,           192.58.36.0/24,           192.67.83.0/24,           192.67.107.0/24,
               192.67.108.0/24,          192.68.52.0/24,           192.68.148.0/24,          192.68.162.0/24,
               192.70.244.0/24,          192.70.249.0/24,          192.77.80.0/24,           192.84.8.0/24,
               192.88.124.0/24,          192.92.65.0/24,           192.92.90.0/24,           192.100.9.0/24,
               192.100.10.0/24,          192.100.15.0/24,          192.101.148.0/24,         192.102.15.0/24,
               192.102.219.0/24,         192.102.233.0/24,         192.102.234.0/24,         192.112.18.0/24,
               192.112.223.0/24,         192.112.224.0/24,         192.124.20.0/24,          192.138.101.0/24,
               192.138.172.0/24,         192.149.89.0/24,          192.149.104.0/24,         192.149.107.0/24,
               192.149.133.0/24,         192.150.32.0/21,          192.153.157.0/24,         192.188.4.0/24,
               192.203.230.0/24,         192.225.64.0/19,          192.243.0.0/20,           192.243.16.0/21,
               193.29.206.0/24,          193.110.16.0/22,          193.110.16.0/23,          193.110.18.0/23,
               193.111.240.0/22,         193.178.228.0/23,         193.178.228.0/24,         193.178.229.0/24,
               194.0.12.0/24,            194.0.13.0/24,            194.0.14.0/24,            194.0.17.0/24,
               194.0.27.0/24,            194.0.36.0/24,            194.0.42.0/24,            194.0.47.0/24,
               194.28.144.0/22,          194.117.58.0/24,          194.117.60.0/24,          194.117.61.0/24,
               194.117.62.0/24,          194.117.63.0/24,          194.146.180.0/22,         194.146.180.0/23,
               194.146.180.0/24,         194.146.181.0/24,         194.146.182.0/23,         194.146.182.0/24,
               194.146.183.0/24,         194.146.228.0/22,         194.146.228.0/23,         194.146.228.0/24,
               194.146.229.0/24,         194.146.230.0/23,         194.146.230.0/24,         194.146.231.0/24,
               194.153.148.0/23,         195.64.162.0/23,          195.64.162.0/24,          195.64.163.0/24,
               195.82.138.0/23,          198.9.0.0/16,             198.49.1.0/24,            198.116.0.0/14,
               198.120.0.0/14,           198.182.28.0/24,          198.182.31.0/24,          198.182.167.0/24,
               199.4.137.0/24,           199.7.64.0/24,            199.7.77.0/24,            199.7.83.0/24,
               199.7.86.0/24,            199.7.91.0/24,            199.7.94.0/24,            199.7.95.0/24,
               199.43.132.0/24,          199.115.156.0/24,         199.115.157.0/24,         199.120.141.0/24,
               199.120.142.0/23,         199.120.144.0/24,         199.182.32.0/24,          199.182.40.0/24,
               199.184.181.0/24,         199.184.182.0/23,         199.184.184.0/24,         199.249.112.0/24,
               199.249.113.0/24,         199.249.114.0/24,         199.249.115.0/24,         199.249.116.0/24,
               199.249.117.0/24,         199.249.118.0/24,         199.249.119.0/24,         199.249.120.0/24,
               199.249.121.0/24,         199.249.122.0/24,         199.249.123.0/24,         199.249.124.0/24,
               199.249.125.0/24,         199.249.126.0/24,         199.249.127.0/24,         199.254.171.0/24,
               200.1.121.0/24,           200.1.131.0/24,           200.7.4.0/24,             200.16.98.0/24,
               202.6.102.0/24,           202.7.4.0/22,             202.52.0.0/23,            202.53.186.0/24,
               202.53.191.0/24,          203.119.88.0/23,          204.14.112.0/21,          204.19.119.0/24,
               204.26.57.0/24,           204.61.208.0/21,          204.61.208.0/22,          204.61.208.0/23,
               204.61.210.0/23,          204.61.210.0/24,          204.61.212.0/23,          204.61.216.0/23,
               204.194.22.0/23,          204.194.22.0/24,          204.194.23.0/24,          205.132.46.0/23,
               205.207.155.0/24,         206.51.254.0/23,          206.108.113.0/24,         206.196.160.0/19,
               206.220.228.0/22,         206.220.228.0/23,         206.220.230.0/23,         206.223.122.0/24,
               207.34.5.0/24,            207.34.6.0/23,            208.15.19.0/24,           208.49.115.64/27,
               208.67.88.0/22,           216.21.2.0/23
    ];

    if ! (net ~ allnet) then {
        bgp_large_community.add( IXP_LC_FILTERED_IRRDB_PREFIX_FILTERED );
        bgp_large_community.add( IXP_LC_INFO_IRRDB_FILTERED_STRICT );
        accept;
    } else {
        bgp_large_community.add( IXP_LC_INFO_IRRDB_VALID );
    }



    accept;
}


# The route server export filter exists as the export gateway on the BGP protocol.
#
# Remember that standard IXP community filtering has already happened on the
# master -> bgp protocol pipe.

filter f_export_as42{



    # we should strip our own communities which we used for the looking glass and filtering
    bgp_large_community.delete( [( routeserverasn, *, * )] );
    bgp_community.delete( [( routeserverasn, * )] );

    # default position is to accept:
    accept;

}






    
protocol pipe pp_0003_as42 {
        description "Pipe for AS42 - PCH DNS - VLAN Interface 3";
        table master4;
        peer table t_0003_as42;
        import filter f_export_to_master;
        export where ixp_community_filter(42);
}

protocol bgp pb_0003_as42 from tb_rsclient {
        description "AS42 - PCH DNS";
        neighbor 10.1.0.36 as 42;
        ipv4 {
            import limit 2000 action restart;
            import filter f_import_as42;
            table t_0003_as42;
            export filter f_export_as42;
        };
        password "mcWsqMdzGwTKt67g";
}


########################################################################################
########################################################################################
###
### AS112 - AS112 - VLAN Interface #4

ipv4 table t_0004_as112;



filter f_import_as112
prefix set allnet;
ip set allips;
int set allas;
{


    # Filter small prefixes
    if ( net ~ [ 0.0.0.0/0{25,32} ] ) then {
        bgp_large_community.add( IXP_LC_FILTERED_PREFIX_LEN_TOO_LONG );
        accept;
    }


    if !(avoid_martians()) then {
        bgp_large_community.add( IXP_LC_FILTERED_BOGON );
        accept;
    }

    # Belt and braces: must have at least one ASN in the path
    if( bgp_path.len < 1 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_AS_PATH_TOO_SHORT );
        accept;
    }

    # Peer ASN == route's first ASN?
    if (bgp_path.first != 112 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_FIRST_AS_NOT_PEER_AS );
        accept;
    }

    # set of all IPs this ASN uses to peer with on this VLAN
    allips = [ 10.1.0.6 ];

    # Prevent BGP NEXT_HOP Hijacking
    if !( from = bgp_next_hop ) then {

        # need to differentiate between same ASN next hop or actual next hop hijacking
        if( bgp_next_hop ~ allips ) then {
            bgp_large_community.add( IXP_LC_INFO_SAME_AS_NEXT_HOP );
        } else {
            # looks like hijacking (intentional or not)
            bgp_large_community.add( IXP_LC_FILTERED_NEXT_HOP_NOT_PEER_IP );
            accept;
        }
    }


    # Filter Known Transit Networks
    if filter_has_transit_path() then accept;

    # Belt and braces: no one needs an ASN path with > 64 hops, that's just broken
    if( bgp_path.len > 64 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_AS_PATH_TOO_LONG );
        accept;
    }


        
    allas = [ 112
    ];


    # Ensure origin ASN is in the neighbors AS-SET
    if !(bgp_path.last_nonaggregated ~ allas) then {
        bgp_large_community.add( IXP_LC_FILTERED_IRRDB_ORIGIN_AS_FILTERED );
        accept;
    }



    # RPKI test - if it's INVALID or VALID, we are done
    if filter_rpki() then accept;




    allnet = [ 192.175.48.0/24
    ];

    if ! (net ~ allnet) then {
        bgp_large_community.add( IXP_LC_FILTERED_IRRDB_PREFIX_FILTERED );
        bgp_large_community.add( IXP_LC_INFO_IRRDB_FILTERED_STRICT );
        accept;
    } else {
        bgp_large_community.add( IXP_LC_INFO_IRRDB_VALID );
    }



    accept;
}


# The route server export filter exists as the export gateway on the BGP protocol.
#
# Remember that standard IXP community filtering has already happened on the
# master -> bgp protocol pipe.

filter f_export_as112{



    # we should strip our own communities which we used for the looking glass and filtering
    bgp_large_community.delete( [( routeserverasn, *, * )] );
    bgp_community.delete( [( routeserverasn, * )] );

    # default position is to accept:
    accept;

}






    
protocol pipe pp_0004_as112 {
        description "Pipe for AS112 - AS112 - VLAN Interface 4";
        table master4;
        peer table t_0004_as112;
        import filter f_export_to_master;
        export where ixp_community_filter(112);
}

protocol bgp pb_0004_as112 from tb_rsclient {
        description "AS112 - AS112";
        neighbor 10.1.0.6 as 112;
        ipv4 {
            import limit 20 action restart;
            import filter f_import_as112;
            table t_0004_as112;
            export filter f_export_as112;
        };
        password "w83fmGpRDtaKomQo";
}


########################################################################################
########################################################################################
###
### AS1213 - HEAnet - VLAN Interface #1

ipv4 table t_0001_as1213;



filter f_import_as1213
prefix set allnet;
ip set allips;
int set allas;
{

    ########################################################################################
    ########################################################################################
    #
    # UI Based Filtering (import rules) - **WHAT THE RS IS LEARNING FROM THE MEMBER**
    #
    ########################################################################################
    ########################################################################################


    # NO_ADVERTISE to all
    bgp_large_community.add( (routeserverasn,0,0) );


    if ( net = 77.72.72.0/21 ) then {
        # PREPEND_TWICE to AS112
        bgp_large_community.add( (routeserverasn,102,112) );
    }


    ########################################################################################
    # End UI Based Filtering - import rules
    ########################################################################################



    # Filter small prefixes
    if ( net ~ [ 0.0.0.0/0{25,32} ] ) then {
        bgp_large_community.add( IXP_LC_FILTERED_PREFIX_LEN_TOO_LONG );
        accept;
    }


    if !(avoid_martians()) then {
        bgp_large_community.add( IXP_LC_FILTERED_BOGON );
        accept;
    }

    # Belt and braces: must have at least one ASN in the path
    if( bgp_path.len < 1 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_AS_PATH_TOO_SHORT );
        accept;
    }

    # Peer ASN == route's first ASN?
    if (bgp_path.first != 1213 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_FIRST_AS_NOT_PEER_AS );
        accept;
    }

    # set of all IPs this ASN uses to peer with on this VLAN
    allips = [ 10.1.0.10 ];

    # Prevent BGP NEXT_HOP Hijacking
    if !( from = bgp_next_hop ) then {

        # need to differentiate between same ASN next hop or actual next hop hijacking
        if( bgp_next_hop ~ allips ) then {
            bgp_large_community.add( IXP_LC_INFO_SAME_AS_NEXT_HOP );
        } else {
            # looks like hijacking (intentional or not)
            bgp_large_community.add( IXP_LC_FILTERED_NEXT_HOP_NOT_PEER_IP );
            accept;
        }
    }


    # Filter Known Transit Networks
    if filter_has_transit_path() then accept;

    # Belt and braces: no one needs an ASN path with > 64 hops, that's just broken
    if( bgp_path.len > 64 ) then {
        bgp_large_community.add( IXP_LC_FILTERED_AS_PATH_TOO_LONG );
        accept;
    }


        
    allas = [ 112,   1213,  1921,  2128,  2850,  42310
    ];


    # Ensure origin ASN is in the neighbors AS-SET
    if !(bgp_path.last_nonaggregated ~ allas) then {
        bgp_large_community.add( IXP_LC_FILTERED_IRRDB_ORIGIN_AS_FILTERED );
        accept;
    }



    # RPKI test - if it's INVALID or VALID, we are done
    if filter_rpki() then accept;




    allnet = [ 4.53.84.128/26,           4.53.146.192/26,          77.72.72.0/21,            87.32.0.0/12,
               91.123.224.0/20,          134.226.0.0/16,           136.201.0.0/16,           136.206.0.0/16,
               137.43.0.0/16,            140.203.0.0/16,           143.239.0.0/16,           147.252.0.0/16,
               149.153.0.0/16,           149.157.0.0/16,           157.190.0.0/16,           160.6.0.0/16,
               176.97.158.0/24,          192.174.68.0/24,          192.175.48.0/24,          193.1.0.0/16,
               193.242.111.0/24,         194.0.24.0/24,            194.0.25.0/24,            194.0.26.0/24,
               194.88.240.0/23,          212.3.242.128/26
    ];

    if ! (net ~ allnet) then {
        bgp_large_community.add( IXP_LC_FILTERED_IRRDB_PREFIX_FILTERED );
        bgp_large_community.add( IXP_LC_INFO_IRRDB_FILTERED_STRICT );
        accept;
    } else {
        bgp_large_community.add( IXP_LC_INFO_IRRDB_VALID );
    }



    accept;
}


# The route server export filter exists as the export gateway on the BGP protocol.
#
# Remember that standard IXP community filtering has already happened on the
# master -> bgp protocol pipe.

filter f_export_as1213{



    # we should strip our own communities which we used for the looking glass and filtering
    bgp_large_community.delete( [( routeserverasn, *, * )] );
    bgp_community.delete( [( routeserverasn, * )] );

    ############################################################################################
    ############################################################################################
    #
    # UI Based Filtering (export rules) - **THIRD PARTY ROUTES THE RS IS SENDING TO THE MEMBER**
    #
    ############################################################################################
    ############################################################################################


    # NO_ADVERTISE - do not advertise this to the route server client
    reject;


    if ( bgp_path.first = 112 ) then {
        if ( net = 192.175.48.0/24 ) then {
            # PREPEND_TWICE
            bgp_path.prepend( bgp_path.first );
            bgp_path.prepend( bgp_path.first );
        }
    }


    # AS_IS - a no-op but we accept here as 'first rule matches'
    accept;

    ########################################################################################
    # End UI Based Filtering - export rules
    ########################################################################################

    # default position is to accept:
    accept;

}






    
protocol pipe pp_0001_as1213 {
        description "Pipe for AS1213 - HEAnet - VLAN Interface 1";
        table master4;
        peer table t_0001_as1213;
        import filter f_export_to_master;
        export where ixp_community_filter(1213);
}

protocol bgp pb_0001_as1213 from tb_rsclient {
        description "AS1213 - HEAnet";
        neighbor 10.1.0.10 as 1213;
        ipv4 {
            import limit 1000 action restart;
            import filter f_import_as1213;
            table t_0001_as1213;
            export filter f_export_as1213;
        };
        password "N7rX2SdfbRsyBLTm";
}



