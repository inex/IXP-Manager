[%# 

Copyright (C) 2009-2011 Internet Neutral Exchange Association Limited.
All Rights Reserved.

This file is part of IXP Manager.

IXP Manager is free software: you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation, version 2.0 of the License.

IXP Manager is distributed in the hope that it will be useful, but WITHOUT
ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
more details.

You should have received a copy of the GNU General Public License v2.0
along with IXP Manager.  If not, see:

http://www.gnu.org/licenses/gpl-2.0.html

%]
!
! Template for building IXP route servers with BIRD - http://bird.network.cz/
! 
[% USE IRRToolSetBird -%]

log "/var/log/bird-routeserver.log" all;
log syslog all;

define routeserverasn = [% ixp_rs_asn %];
define routeserveraddress = [% ixp_rs_address %];

router id [% ixp_rs_routerid %];
listen bgp address [% ixp_rs_address %];

# ignore interface up/down events
protocol device { }

# This function excludes weird networks
#  rfc1918, class D, class E, too long and too short prefixes 
function avoid_martians()
prefix set martians;
{
	martians = [
		10.0.0.0/8+,
		169.254.0.0/16+,
		172.16.0.0/12+,
		192.0.0.0/24+,
		192.0.2.0/24+,
		192.168.0.0/16+,
		198.18.0.0/15+,
		198.51.100.0/24+,
		203.0.113.0/24+,
		224.0.0.0/4+,
		240.0.0.0/4+,
		0.0.0.0/32-,
		0.0.0.0/0{25,32},
		0.0.0.0/0{0,7}
	];

	# Avoid RFC1918 and similar networks
	if net ~ martians then
		return false;

	return true;
}

##
## Standard IXP community filter
##

function ixp_community_filter(int peerasn)
{
	if !(source = RTS_BGP) then
		return false;

	# default community filtering schema doesn't support ASN32, as there
	# are only 6 octets available for numbering.  We need
	# draft-raszuk-wide-bgp-communities to become reality.

	if peerasn > 65535 then
		return true;

	# Implement widely used community filtering schema.
	if (0, peerasn) ~ bgp_community then
		return false;
	if (routeserverasn, peerasn) ~ bgp_community then
		return true;
	if (0, routeserverasn) ~ bgp_community then
		return false;

	return true;
}

##
## Route Server client configuration
##
[% FOREACH vid IN sortedkeys -%]
[% IF entries.$vid.address AND entries.$vid.rsclient -%]
[% asn = entries.$vid.autsys %]

### AS[% asn %] - [% entries.$vid.name %]
table t_as[% asn %];

filter f_import_as[% asn %]
prefix set allnet;
int set allas;
{
#	if !(avoid_martians()) then
#		reject;

	if (bgp_path.first != [% asn %] ) then
		reject;

	allas = [ 
[% afifilter = 'afi ' _ protocol _ '.unicast ' _ entries.$vid.peeringmacro -%]
[% FILTER $IRRToolSetBird 'asnlist' afifilter irrdb = entries.$vid.irrdb %]
[% END -%]
	];
	if !(bgp_path.last ~ allas) then
		reject;

	allnet = [
[% FILTER $IRRToolSetBird 'prefixlist' afifilter irrdb = entries.$vid.irrdb %]
[% END -%]
	];
	if ! (net ~ allnet) then
		reject;

	accept;
}

protocol pipe pp_as[% asn %] {
	description "Pipe for AS[% asn %] - [% entries.$vid.name %]";
	table master;
	mode transparent;
	peer table t_as[% asn %];
	import filter f_import_as[% asn %];
	export where ixp_community_filter([% asn %]);
}

protocol bgp pb_as[% asn %] {
	description "RIB for AS[% asn %] - [% entries.$vid.name %]";
	local as routeserverasn;
	source address routeserveraddress;
	neighbor [% entries.$vid.address %] as [% asn %];
[% md5type = protocol _ 'bgpmd5secret' -%]
[% bgpmd5secret = entries.$vid.$md5type -%]
[% IF bgpmd5secret -%]
	password [% bgpmd5secret %];
[% END -%]
	import all;
	export all;
	route limit [% entries.$vid.maxprefixes -%];
	table t_as[% asn %];
	rs client;
}

[% END -%]
[% END -%]
